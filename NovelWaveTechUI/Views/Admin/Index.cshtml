@model List<Application.ViewModel.UserWithRolesViewModel>
@* @using Application.Permissions
@inject IHttpContextAccessor HttpContextAccessor *@

@if (TempData["SuccessMessage"] != null)
{
    <div class="toast position-fixed bottom-0 end-0 m-4" role="alert"
         aria-live="assertive" aria-atomic="true"
         data-bs-delay="5000" data-bs-autohide="true" style="z-index: 1055;">
        <div class="toast-header bg-success text-white">
            <strong class="me-auto">Success</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">@TempData["SuccessMessage"]</div>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="toast position-fixed bottom-0 end-0 m-4" role="alert"
         aria-live="assertive" aria-atomic="true"
         data-bs-delay="5000" data-bs-autohide="true" style="z-index: 1055;">
        <div class="toast-header bg-danger text-white">
            <strong class="me-auto">Error</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">@TempData["ErrorMessage"]</div>
    </div>
}



<h2>Manage Users Roles</h2>
<table class="table">
    <thead>
        <tr>
            <th>Email</th>
            <th>Roles</th>
            <th>Manage</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model)
        {
            <tr>
                <td>@user.Email</td>
                <td>@string.Join(", ", user.Roles)</td>
                <td>
                    <a asp-action="ManageRoles" id="ManageRoles-@user.UserId" style="display:none;"
                       asp-route-userId="@user.UserId">Manage Roles</a>
                    <a asp-action="PermissionMatrix" id="ManageRoles2-@user.UserId" style="display:none;"
                       asp-route-userId="@user.UserId">Permission Matrix</a>
                </td>
            </tr>
        }
    </tbody>
</table>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var toastElList = [].slice.call(document.querySelectorAll('.toast'))
        toastElList.forEach(function (toastEl) {
            var toast = new bootstrap.Toast(toastEl)
            toast.show()
        })
    });
        fetch(`/Admin/GetUserLoginPermissions`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
    })
    .then(res => {
        if (!res.ok) throw new Error('Invalid token');
        return res.json();
    })
    .then(data => {
        if (data.roles.includes("ManageRoles")) {
            document.querySelectorAll('[id^="ManageRoles"]').forEach(el => {
                el.style.display = 'inline-block';
            });
            document.querySelectorAll('[id^="ManageRoles2"]').forEach(el => {
                el.style.display = 'inline-block';
            });
        }
    })
    .catch(() => {
        document.querySelectorAll('[id^="ManageRoles"]').forEach(el => {
            el.style.display = 'none';
        });
        document.querySelectorAll('[id^="ManageRoles2"]').forEach(el => {
            el.style.display = 'none';
        });
    });

</script>




