<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Transactions</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
          rel="stylesheet" />

    <!-- DataTables CSS -->
    <link rel="stylesheet"
          href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css" />

    <!-- Flatpickr CSS -->
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
    <style>
        .amount-credit {
            color: green !important;
            font-weight: bold;
        }

        .amount-debit {
            color: red !important;
            font-weight: bold;
        }
    </style>

</head>
<body>
    <div class="container mb-3">
        <div class="mb-3 text-end">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#transactionModal" id="btn-new-transaction">
                ➕ New Transaction
            </button>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="mb-0">💳 Transactions</h2>
            <input id="search-input" type="search" class="form-control w-25" placeholder="Search notes..." />
        </div>

        <div class="row g-3 mb-3">
            <div class="col-md-3">
                <select id="filter-customer" class="form-select">
                    <option value="">All Customers</option>
                    <!-- Dynamically populated -->
                </select>
            </div>
            <div class="col-md-3">
                <select id="filter-type" class="form-select">
                    <option value="">All Types</option>
                    <option value="Credit">Credit</option>
                    <option value="Debit">Debit</option>
                </select>
            </div>
            <div class="col-md-3">
                <input id="filter-from" type="text" class="form-control" placeholder="From Date" />
            </div>
            <div class="col-md-3">
                <input id="filter-to" type="text" class="form-control" placeholder="To Date" />
            </div>
        </div>

        <div class="mb-3">
            <button id="btn-reset" class="btn btn-secondary btn-sm">Reset Filters</button>
        </div>

        <div class="table-responsive">
            <table id="transactions-table" class="table table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Type</th>
                        <th>Notes</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Filled via JS -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Transaction Modal -->
    <div class="modal fade" id="transactionModal" tabindex="-1" aria-labelledby="transactionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <form id="transaction-form" class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="transactionModalLabel">New Transaction</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="transaction-id" />
                    <div class="mb-3">
                        <label for="transaction-accountNumber" class="form-label">Account Number</label>
                        <input type="text" class="form-control" id="transaction-accountNumber" />
                    </div>
                    <div class="mb-3">
                        <label for="transaction-amount" class="form-label">Amount</label>
                        <input type="number" class="form-control" id="transaction-amount" required />
                    </div>
                    <div class="mb-3">
                        <label for="transaction-type" class="form-label">Type</label>
                        <select id="transaction-type" class="form-select" required>
                            <option value="">-- Select Type --</option>
                            <option value="1">Credit</option>
                            <option value="2">Debit</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="transaction-notes" class="form-label">Notes</label>
                        <input type="text" class="form-control" id="transaction-notes" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>


    <!-- jQuery (required for DataTables) -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
    <!-- Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script>
                document.addEventListener("DOMContentLoaded", () => {
            const apiUrl = "/Transactions/Get"; // **change to your API endpoint**

            const tableEl = $("#transactions-table");
            let dataTable = null;
            let allTransactions = []; // store full data

            // Initialize date pickers
            flatpickr("#filter-from", { dateFormat: "Y-m-d" });
            flatpickr("#filter-to", { dateFormat: "Y-m-d" });

            // Fetch transactions from API
            async function fetchTransactions() {
                try {
                    const resp = await fetch(apiUrl);
                    if (!resp.ok) {
                        throw new Error(`HTTP ${resp.status}`);
                    }
                    const json = await resp.json();
                    // Expecting an array of transactions
                    allTransactions = json;
                    populateCustomerFilter(json);
                    renderTable(json);
                } catch (err) {
                    console.error("Failed to fetch transactions:", err);
                }
            }

            function populateCustomerFilter(transactions) {
                const select = document.getElementById("filter-customer");
                const unique = new Set(transactions.map((t) => t.customerName || t.customerId));
                unique.forEach((c) => {
                    const opt = document.createElement("option");
                    opt.value = c;
                    opt.text = c;
                    select.appendChild(opt);
                });
            }

            function renderTable(data) {
                // Destroy existing DataTable if exists
                if (dataTable) {
                    dataTable.destroy();
                    tableEl.find("tbody").empty();
                }

                const tbody = tableEl.find("tbody");
                data.forEach((t) => {
                     const tr = $("<tr></tr>");
                    // // Format date (assuming ISO date string)
                    // const dt = new Date(t.date);
                    // const dtStr = dt.toLocaleDateString(undefined, { year: "numeric", month: "short", day: "numeric" });
                    // tr.append(`<td>${dtStr}</td>`);

                    tr.append(`<td>${t.transactionDate}</td>`);
                    // Amount with class
                    const amtCls = t.type === "Credit" ? "amount-credit" : "amount-debit";
                    tr.append(`<td class="${amtCls}">${t.amount.toFixed(2)}</td>`);

                    tr.append(`<td>${t.type}</td>`);
                    tr.append(`<td>${t.notes || ""}</td>`);
                            tr.append(`
          <td>
            <button class="btn btn-sm btn-outline-primary btn-edit" data-id="${t.id}">Edit</button>
            <button class="btn btn-sm btn-outline-danger btn-delete" data-id="${t.id}">Delete</button>
          </td>
        `);

                    tbody.append(tr);
                });

                // Initialize DataTable
                dataTable = tableEl.DataTable({
                    // optional tweaks
                    pageLength: 10,
                    order: [[0, "desc"]],
                    // we will use the built-in search, but also link our custom filters
                });

                // Apply external search input to table
                $("#search-input").on("input", function () {
                    dataTable.search(this.value).draw();
                });
            }

            // Apply filters
            function applyFilters() {
                const cust = document.getElementById("filter-customer").value;
                const type = document.getElementById("filter-type").value;
                const from = document.getElementById("filter-from").value;
                const to = document.getElementById("filter-to").value;

                let filtered = allTransactions;

                if (cust) {
                    filtered = filtered.filter((t) => (t.customerName || t.customerId) === cust);
                }
                if (type) {
                    filtered = filtered.filter((t) => t.type === type);
                }
                if (from) {
                    const dFrom = new Date(from);
                    filtered = filtered.filter((t) => new Date(t.date) >= dFrom);
                }
                if (to) {
                    const dTo = new Date(to);
                    filtered = filtered.filter((t) => new Date(t.date) <= dTo);
                }

                renderTable(filtered);
            }

            // Reset filters
            document.getElementById("btn-reset").addEventListener("click", () => {
                document.getElementById("filter-customer").value = "";
                document.getElementById("filter-type").value = "";
                document.getElementById("filter-from").value = "";
                document.getElementById("filter-to").value = "";
                document.getElementById("search-input").value = "";
                renderTable(allTransactions);
            });

            // Listen to change events on filters
            document.getElementById("filter-customer").addEventListener("change", applyFilters);
            document.getElementById("filter-type").addEventListener("change", applyFilters);
            document.getElementById("filter-from").addEventListener("change", applyFilters);
            document.getElementById("filter-to").addEventListener("change", applyFilters);

            // Initial load
            fetchTransactions();
        });

                const modalEl = new bootstrap.Modal(document.getElementById("transactionModal"));
        const formEl = document.getElementById("transaction-form");

        // CREATE or UPDATE
        formEl.addEventListener("submit", async (e) => {
            e.preventDefault();

            const id = document.getElementById("transaction-id").value;
            const data = {
                Amount: parseFloat(document.getElementById("transaction-amount").value),
                Type: parseInt(document.getElementById("transaction-type").value),
                Notes: document.getElementById("transaction-notes").value,
                accountNumber: document.getElementById("transaction-accountNumber").value,
            };
            console.log(data);
                    try {
            const method = id ? "PUT" : "POST";
            const url = id ? `/Transactions/Update/${id}` : `/Transactions/Create`;
            const resp = await fetch(url, {
                method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(data),
            });

            if (!resp.ok) {
                throw new Error(`HTTP error ${resp.status}`);
            }
            else{
                alert("Transaction saved successfully.");
                //modalEl.hide();
                //fetchTransactions();
                window.location.reload();
            }
            
        } catch (err) {
            console.error("Save failed:", err);
            alert("Failed to save transaction.");
        }

        });

        // OPEN MODAL FOR NEW TRANSACTION
        document.getElementById("btn-new-transaction").addEventListener("click", () => {
            document.getElementById("transaction-form").reset();
            document.getElementById("transaction-id").value = "";
            document.getElementById("transactionModalLabel").innerText = "New Transaction";
        });

        // HANDLE EDIT
        $("#transactions-table").on("click", ".btn-edit", function () {
            const id = $(this).data("id");
            const tx = allTransactions.find((t) => t.id === id);
            if (!tx) return;

            document.getElementById("transaction-id").value = tx.id;
            document.getElementById("transaction-date").value = tx.transactionDate;
            document.getElementById("transaction-amount").value = tx.amount;
            document.getElementById("transaction-type").value = tx.type;
            document.getElementById("transaction-notes").value = tx.notes || "";
            document.getElementById("transactionModalLabel").innerText = "Edit Transaction";
            modalEl.show();
        });

        // HANDLE DELETE
        $("#transactions-table").on("click", ".btn-delete", async function () {
            const id = $(this).data("id");
            if (!confirm("Are you sure you want to delete this transaction?")) return;

            try {
                const resp = await fetch(`/Transactions/Delete/${id}`, { method: "DELETE" });
                if (!resp.ok) throw new Error("Delete failed");

                fetchTransactions();
            } catch (err) {
                console.error("Delete error:", err);
                alert("Failed to delete transaction.");
            }
        });

    </script>
</body>
</html>
